extends layout

block content
	.mdl-layout.mdl-js-layout
		body(class="mdl-color--grey-100", style="padding:0px;")
			.mdl-grid(Style="max-width:600px;")
				.mdl-cell.mdl-cell--12-col
					h2= title
				.mdl-cell.mdl-cell--12-col.mdl-color--white.mdl-shadow--2dp(id="inputDiv", style="padding:10px;")
					//form(action= '/result', method='POST')
					.mdl-textfield.mdl-js-textfield.mdl-textfield--floating-label.mdl-cell--12-col
						input(class="mdl-textfield__input", type="text",  id="locationFromInput", name="from")
						label(class="mdl-textfield__label", for="locationFromInput") From
					.mdl-textfield.mdl-js-textfield.mdl-textfield--floating-label.mdl-cell--12-col
						input(class="mdl-textfield__input", type="text",  id="locationToInput", name="to")
						label(class="mdl-textfield__label", for="locationToInput") To
					button(class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-js-ripple-effect mdl-cell--12-col", id="submitButton") Submit
					.mdl-progress.mdl-js-progress.mdl-progress__indeterminate.mdl-cell--12-col(id="progressBar", style="margin-top:10px") 
				.mdl-cell.mdl-cell--12-col.mdl-color--white.mdl-shadow--2dp(id="resultDiv", style="padding:10px;")
					.result
					button(class="mdl-button mdl-js-button mdl-button--raised mdl-button--accent mdl-js-ripple-effect mdl-cell--12-col", id="backButton") Back
				.mdl-cell.mdl-cell--12-col.mdl-color--white.mdl-shadow--2dp(id="mgbrgbr", style="padding:10px;")
					iframe(id="routeMap", width="100%", height="400", src="https://www.google.com/maps/embed/v1/directions?mode=driving&origin=Tate+Modern&destination=Tower+of+London&key=AIzaSyDnfJIBZj1_q75mLz20h-tSft1gl5SeXFs")
		footer(class="mdl-mini-footer")
			.mdl-mini-footer__left-section
				.mdl-logo ||
				ul.mdl-mini-footer__link-list
					li
						a(href='/disclaimer') Disclaimer
					li
						a(href='#') Changelog
					li
						a v0.1
					
	script(type='text/javascript').
		$("#progressBar").hide();
		$("#resultDiv").hide();
		$("#locationToInput").val("");
		$("#locationFromInput").val("");		
		class locationInfo {
			constructor(start_latitude, start_longitude, end_latitude, end_longitude){
				this.start_latitude = start_latitude;
				this.start_longitude = start_longitude;
				this.end_latitude = end_latitude;
				this.end_longitude= end_longitude;
			}
		};
		var currentLocationInfo = new locationInfo();
		var autocompleteFrom;
		var autocompleteTo;
		
		
		function initAutocomplete(){
			// Create the autocomplete object, restricting the search to geographical
			// location types.
			autocompleteFrom = new google.maps.places.Autocomplete(
				/** @type {!HTMLInputElement} */(document.getElementById('locationFromInput')),
				{types: ['geocode']});
			// When the user selects an address from the dropdown, populate the address
			// fields in the form.
			autocompleteFrom.addListener('place_changed', fillFromAddress);
			
			autocompleteTo = new google.maps.places.Autocomplete(
				/** @type {!HTMLInputElement} */(document.getElementById('locationToInput')),
				{types: ['geocode']});
			// When the user selects an address from the dropdown, populate the address
			// fields in the form.
			autocompleteTo.addListener('place_changed', fillToAddress);
		}
		
		function fillFromAddress() {
			var place = autocompleteFrom.getPlace(); //getPlace function comes from google
			currentLocationInfo.start_latitude = place.geometry.location.lat();
			currentLocationInfo.start_longitude = place.geometry.location.lng();
			refreshMap();
			console.log(currentLocationInfo);
		}
		
		function fillToAddress() {
			var place = autocompleteTo.getPlace();
			currentLocationInfo.end_latitude = place.geometry.location.lat();
			currentLocationInfo.end_longitude = place.geometry.location.lng();
			refreshMap();
			console.log(currentLocationInfo);
		}
		
		function refreshMap(){
			var fromStr = $("#locationFromInput").val();
			var toStr = $("#locationToInput").val();
			var mapSrcStr = $("#routeMap").attr('src');
			//regex to break google map url into components
			var regex = new RegExp("(origin=)([^&]*)(&destination=)([^&]*)")
			//leave component 1, 3 as is. Replace the rest with location info.
			mapSrcStr = mapSrcStr.replace(regex,"$1"+fromStr+"$3"+toStr);
			console.log(mapSrcStr);
			$("#routeMap").attr('src',mapSrcStr);
		}
		
		
		// Bias the autocomplete object to the user's geographical location,
		// as supplied by the browser's 'navigator.geolocation' object.
		function geolocate() {
			if (navigator.geolocation) {
				navigator.geolocation.getCurrentPosition(function(position) {
				var geolocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				var circle = new google.maps.Circle({
					center: geolocation,
					radius: position.coords.accuracy
				});
				autocomplete.setBounds(circle.getBounds());
				});
			}
		}
		
		$("#submitButton").click(function(){
			$("#submitButton").prop('disabled', true);
			$("#locationToInput").prop('disabled', true);
			$("#locationFromInput").prop('disabled', true);
			$("#progressBar").show();
			$.post("/result", currentLocationInfo, function(data) {
				console.log(data);
				$ee = $('div.result');
				$ee.prop('disabled', false);
				$.each(data.prices, function(key, value){
					$ee.append("<p>"+value.display_name+": "+value.estimate+"</p>");
					$("#progressBar").hide();
					$("#inputDiv").hide();
					$("#resultDiv").show();
					$("#submitButton").prop('disabled', false);
					$("#locationToInput").prop('disabled', false);
					$("#locationFromInput").prop('disabled', false);
				});
			});
		});
		
		$("#backButton").click(function(){
			$('div.result').empty();
			$("#resultDiv").hide();
			$("#inputDiv").show();
		});
	
	script(type='text/javascript', src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDnfJIBZj1_q75mLz20h-tSft1gl5SeXFs&libraries=places&callback=initAutocomplete", async, defer)
		