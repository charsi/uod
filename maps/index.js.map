{"version":3,"sources":["index.js"],"names":["clearLocationInfo","currentLocationInfo","start_latitude","start_longitude","end_latitude","end_longitude","clearDriveFactors","driveFactors","duration","distance","trafficMultiplier","petrolUsed","driveCost","restMap","markersArray","map","google","maps","Map","document","getElementById","center","localLatLang","scrollwheel","zoom","mapTypeControl","streetViewControl","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","resetEverything","$","hide","val","prop","refreshMap","$resultGrid","fadeOut","$inputGrid","fadeIn","$uberResultSubDiv","$driveResultSubDiv","$resultDiv","$fromDiv","$toDiv","$fuelSpan","forEach","clearDiv","initAutocomplete","autocompleteFrom","places","Autocomplete","types","addListener","fillFromAddress","autocompleteTo","fillToAddress","geolocate","place","getPlace","geometry","location","lat","lng","fromLocationValid","toLocationValid","clearOverlays","i","length","setMap","tmpLatLang","setZoom","fromStr","toStr","route","origin","destination","travelMode","response","status","setDirections","console","log","marker","Marker","position","title","push","panTo","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","circle","Circle","radius","accuracy","setBounds","getBounds","freezeControls","div","empty","populateDriveFactors","uberInfo","prices","currency","estimate","match","units","m2k","makeDriveCalculations","df","milage","dc","fuelCost","toFixed","changeDfUnits","newunits","dfus","unitStrings","switchModalMilageUnits","fuelUnits","milageUnits","distUnits","fuelCostUnits","g2l","refreshDriveInfo","html","createUberHtml","cheapestOptionCost","split","display_name","serviceName","each","key","value","getValueFromMilageString","string","parseFloat","smallMilage","text","mediumMilage","largeMilage","Math","round","toString","$progressBar","currency_symbols","USD","EUR","CRC","GBP","ILS","INR","JPY","KRW","NGN","PHP","PLN","PYG","THB","UAH","VND","fuel","get","ipGeo","attr","country_code","click","show","trafficPromise","post","then","reply","multiplier","uberPromise","data","append","uberHtml","trafficLayer","TrafficLayer","dialog","querySelector","showDialogButton","showModal","dialogPolyfill","registerDialog","addEventListener","close","on","innerHTML","change","this","s","o","g","r","a","m","q","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","ga"],"mappings":"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","file":"index.js","sourcesContent":["\"use strict\";\r\n\r\n// google autocomplete objects\r\nvar autocompleteFrom;\r\nvar autocompleteTo;\r\n\r\n// google map object and markers array\r\nvar map;\r\nvar markersArray = [];\r\n\r\n// google directions\r\nvar directionsService;\r\nvar directionsDisplay;\r\n\r\n// origin and destination address\r\nvar fromStr;\r\nvar toStr;\r\n\r\n// DOM variables\r\nvar $uberResultSubDiv = $('#uberResultSubDiv');\r\nvar $driveResultSubDiv = $('#driveResultSubDiv');\r\nvar $resultDiv = $('#resultDiv');\r\nvar $fromDiv= $(\"#fromDiv\");\r\nvar $toDiv = $(\"#toDiv\");\r\nvar $inputGrid = $(\"#inputDiv\");\r\nvar $resultGrid = $(\"#resultGrid\");\r\nvar $progressBar = $(\"#progressBar\");\r\nvar $fuelSpan = $(\"#fuel\");\r\n\r\nvar g2l = 3.785 ;\t// 1 gallon = g2l * litres\r\nvar m2k = 1.609 ;\t// 1 mile = m2k * kms\r\n\r\nvar currency_symbols = {\r\n    'USD': '$', // US Dollar\r\n    'EUR': '€', // Euro\r\n    'CRC': '₡', // Costa Rican Colón\r\n    'GBP': '£', // British Pound Sterling\r\n    'ILS': '₪', // Israeli New Sheqel\r\n    'INR': '₹', // Indian Rupee\r\n    'JPY': '¥', // Japanese Yen\r\n    'KRW': '₩', // South Korean Won\r\n    'NGN': '₦', // Nigerian Naira\r\n    'PHP': '₱', // Philippine Peso\r\n    'PLN': 'zł', // Polish Zloty\r\n    'PYG': '₲', // Paraguayan Guarani\r\n    'THB': '฿', // Thai Baht\r\n    'UAH': '₴', // Ukrainian Hryvnia\r\n    'VND': '₫', // Vietnamese Dong\r\n};\r\n\r\n// google api key\r\n//const key = \"AIzaSyDnfJIBZj1_q75mLz20h-tSft1gl5SeXFs\";\r\nconst key = \"***REMOVED***\";\r\n\r\n// set default map coordinates (to London)\r\n// will be overriden by local coordinates if user shares location\r\nvar localLatLang = {lat: 51.5089254, lng: -0.107437};\r\n\r\n// holder for geolocation coordinates returned by google\r\nvar currentLocationInfo = {\r\n\tstart_latitude : \"\",\r\n\tstart_longitude : \"\",\r\n\tend_latitude : \"\",\r\n\tend_longitude : \"\"\r\n};\r\n\r\nfunction clearLocationInfo(){\r\n\tcurrentLocationInfo = {\r\n\t\tstart_latitude : \"\",\r\n\t\tstart_longitude : \"\",\r\n\t\tend_latitude : \"\",\r\n\t\tend_longitude : \"\"\r\n\t};\r\n}\r\n\r\n// holder for factors involved in drive cost calculation\r\nvar driveFactors = {\r\n\tduration : 0.00,        // in minutes \r\n\tdistance : 0.00,        // in km\r\n\tmilage : 14.00,\t\t\t// in kmpl\r\n\tfuelCost : 64.00,\t\t// per litre, in local currency\r\n\ttrafficMultiplier : 1.00, // time with traffic/time without traffic\r\n\tcurrency : '',\t\t\t// currency symbol string\r\n\tpetrolUsed : 0.0,\t\t// calculated, in litres\r\n\tdriveCost : '',\t\t\t// calculated, in local currency\r\n\tunits : 'metric',\t\t//or imperial\r\n\tfuel : 'petrol',\t\t// or diesel\r\n\tunitStrings : {\r\n\t\tdistUnits : \"kms\",\t\t\t// or \"miles\"\r\n\t\tmilageUnits : \"kmpl\",\t\t// or \"mpg\"\r\n\t\tfuelUnits : \"L\",\t\t\t// or \"GL\"\r\n\t\tfuelCostUnits : \"per litre\" // or 'per gallon'\r\n\t}\r\n};\r\n\r\n//-----------------------\r\n\r\n$resultGrid.hide();\r\n\r\n\r\n\r\n// set map to visitor's location, and local units if (US or UK)\r\n$.get('http://freegeoip.net/json/', function(ipGeo){\r\n\tlocalLatLang = {lat: ipGeo.latitude, lng: ipGeo.longitude};\r\n\tmap.panTo(localLatLang);\r\n\t//if (ipGeo.country_code == 'GB'){\r\n\t\tg2l = 4.5;\r\n\t\t$(\"#modal_gallon_type\").text(\"UK\");\r\n\t\t$('input[name=units]#units-2').attr('checked', true);\r\n\t\tdriveFactors.fuelCost = 1.11;\r\n\t\tchangeDfUnits('imperial');\r\n\t\trefreshDriveInfo();\r\n\t//} else \r\n\t\tif (ipGeo.country_code == 'US'){\r\n\t\t$('input[name=units]#units-2').attr('checked', true);\r\n\t\tchangeDfUnits('imperial');\t\t// change unit strings\r\n\t\tdriveFactors.fuelCost = 0.63;\r\n\t\trefreshDriveInfo();\r\n\t\tdriveFactors.fuelCost = 2.2;\r\n\t}\r\n});\r\n\r\nfunction clearDriveFactors(){\r\n\tdriveFactors.duration = 0.00;\r\n\tdriveFactors.distance = 0.00;\r\n\tdriveFactors.trafficMultiplier = 1.00;\r\n\tdriveFactors.petrolUsed = 0.0;\r\n\tdriveFactors. driveCost = '';\r\n}\r\n\r\nfunction restMap(){\r\n\tmarkersArray = [];\r\n\tmap = new google.maps.Map(document.getElementById('map'), {\r\n\t\tcenter: localLatLang,\r\n\t\tscrollwheel: true,\r\n\t\tzoom: 10,\r\n\t\tmapTypeControl: false,\r\n\t\tstreetViewControl: false\r\n\t});\r\n\tdirectionsService = new google.maps.DirectionsService; \r\n\tdirectionsDisplay = new google.maps.DirectionsRenderer;  \r\n}\r\n\r\nfunction resetEverything(){\r\n\t// initialise google map\r\n\t$(\"#progressBar\").hide();\r\n\t$(\"#locationToInput\").val(\"\");\r\n\t$(\"#locationFromInput\").val(\"\");\r\n\t$(\"#submitButton\").prop('disabled', false);\r\n\t$(\"#locationToInput\").prop('disabled', false);\r\n\t$(\"#locationFromInput\").prop('disabled', false);\r\n\tclearLocationInfo();\r\n\tclearDriveFactors();\r\n\trestMap();\r\n\trefreshMap();\r\n\t$resultGrid.fadeOut( \"slow\", function(){\r\n\t\t$inputGrid.fadeIn( \"slow\" );\r\n\t\t// clear all result divs\r\n\t\t[\r\n\t\t\t$uberResultSubDiv,\r\n\t\t\t$driveResultSubDiv,\r\n\t\t\t$resultDiv,\r\n\t\t\t$fromDiv,\r\n\t\t\t$toDiv,\r\n\t\t\t$fuelSpan\r\n\t\t].forEach(clearDiv);\r\n\t});\r\n}\r\n\r\n// callback function for google maps api. Fired when it finishes loading. \r\nfunction initAutocomplete() {\r\n\t// 'from' autocomplete object\r\n\tautocompleteFrom = new google.maps.places.Autocomplete(\r\n\t/** @type {!HTMLInputElement} */document.getElementById('locationFromInput'), { types: ['geocode'] });\r\n\t// populate 'from' when user selects an address from the list \r\n\tautocompleteFrom.addListener('place_changed', fillFromAddress);\r\n\t\r\n\t// 'to' autocomplete object\r\n\tautocompleteTo = new google.maps.places.Autocomplete(\r\n\t/** @type {!HTMLInputElement} */document.getElementById('locationToInput'), { types: ['geocode'] });\r\n\t// populate 'to' when user selects an address from the list\r\n\tautocompleteTo.addListener('place_changed', fillToAddress);\r\n\t\r\n\tgeolocate();\t\t// get user's geographical location\r\n\t\r\n\tresetEverything();\t// reset incase the browser caches form entries\r\n}\r\n\r\n// populate lat, lng of origin address\r\nfunction fillFromAddress() {\r\n\tvar place = autocompleteFrom.getPlace();\r\n\tcurrentLocationInfo.start_latitude = place.geometry.location.lat();\r\n\tcurrentLocationInfo.start_longitude = place.geometry.location.lng();\r\n\trefreshMap();\t// show marker for 'from' address\r\n}\r\n\r\n// populate lat, lng of destination address\r\nfunction fillToAddress() {\r\n\tvar place = autocompleteTo.getPlace();\r\n\tcurrentLocationInfo.end_latitude = place.geometry.location.lat();\r\n\tcurrentLocationInfo.end_longitude = place.geometry.location.lng();\r\n\trefreshMap();\t// show marker for 'to' address\r\n}\r\n\r\n// has a 'from' location been entered? is it valid?\r\nfunction fromLocationValid(){\r\n\tif ( currentLocationInfo.start_latitude!=\"\" &&\r\n\t\tcurrentLocationInfo.start_longitude!=\"\" &&\r\n\t\t$('#locationFromInput').val() !=\"\"\r\n\t\t)\r\n\t{\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\t\r\n}\r\n\r\n// has a 'to' location been entered? is it valid?\r\nfunction toLocationValid(){\r\n\tif (currentLocationInfo.end_latitude!=\"\" &&\r\n\t\tcurrentLocationInfo.end_longitude!=\"\"&&\r\n\t\t$('#locationToInput').val() !=\"\"\r\n\t\t)\r\n\t{\r\n\t\treturn true;\r\n\t} else {\r\n\t\treturn false;\r\n\t}\t\r\n}\r\n\r\n// remove all markers from map\r\nfunction clearOverlays() {\r\n  for (var i = 0; i < markersArray.length; i++ ) {\r\n    markersArray[i].setMap(null);\r\n  }\r\n  markersArray.length = 0;\r\n}\r\n\r\n// show only to/from location or a route between them \r\n// if both locations have been entered\r\nfunction refreshMap() {\r\n\tvar tmpLatLang = localLatLang;\r\n\tmap.setZoom(10);\r\n\tvar mapSrcUrl;\r\n\tfromStr = $(\"#locationFromInput\").val();\r\n\ttoStr = $(\"#locationToInput\").val();\r\n\t//if both locations are valid, create a route\r\n\tif (fromLocationValid() && toLocationValid()){\r\n\t\tclearOverlays();\r\n\t\tdirectionsDisplay.setMap(map);\r\n        directionsService.route({\r\n\t\t\torigin: fromStr,\r\n\t\t\tdestination: toStr,\r\n\t\t\ttravelMode: 'DRIVING'\r\n        }, function(response, status) {\r\n\t\t\tif (status === 'OK') {\r\n\t\t\t\tdirectionsDisplay.setDirections(response);\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log('Directions request failed due to ' + status);\r\n\t\t\t}\r\n        });\r\n\t}\r\n\telse if (fromLocationValid()) {\t\t// if only 'from' address is valid\r\n\t\ttmpLatLang = {\r\n\t\t\tlat : currentLocationInfo.start_latitude,\r\n\t\t\tlng: currentLocationInfo.start_longitude\r\n\t\t}\r\n\t\tvar marker = new google.maps.Marker({\r\n\t\t\tposition: tmpLatLang,\r\n\t\t\tmap: map,\r\n\t\t\ttitle: fromStr\r\n\t\t});\r\n\t\tmarkersArray.push(marker);\r\n\t\tmap.setZoom(13);\r\n\t}\r\n\telse if (toLocationValid()) {\t\t// if only 'to' address is valid\r\n\t\ttmpLatLang = {\r\n\t\t\tlat : currentLocationInfo.end_latitude,\r\n\t\t\tlng: currentLocationInfo.end_longitude\r\n\t\t}\r\n\t\tvar marker = new google.maps.Marker({\r\n\t\t\tposition: tmpLatLang,\r\n\t\t\tmap: map,\r\n\t\t\ttitle: toStr\r\n\t\t});\r\n\t\tmarkersArray.push(marker);\r\n\t\tmap.setZoom(13);\r\n\t}\r\n\tmap.panTo(tmpLatLang);\t// re-centre the map\r\n}\r\n\r\n\r\n// Bias the autocomplete object to the user's geographical location,\r\n// as supplied by the browser's 'navigator.geolocation' object.\r\nfunction geolocate() {\r\n\tif (navigator.geolocation) {\r\n\t\tnavigator.geolocation.getCurrentPosition(function (position) {\r\n\t\t\tvar geolocation = {\r\n\t\t\t\tlat: position.coords.latitude,\r\n\t\t\t\tlng: position.coords.longitude\r\n\t\t\t};\r\n\t\t\tvar circle = new google.maps.Circle({\r\n\t\t\t\tcenter: geolocation,\r\n\t\t\t\tradius: position.coords.accuracy\r\n\t\t\t});\r\n\t\t\tautocompleteFrom.setBounds(circle.getBounds());\r\n\t\t\tautocompleteTo.setBounds(circle.getBounds());\r\n\t\t\tlocalLatLang.lat = geolocation.lat;\r\n\t\t\tlocalLatLang.lng = geolocation.lng;\r\n\t\t\trefreshMap();\r\n\t\t\t//console.log(circle.center);\r\n\t\t\t//console.log(2222222222222);\r\n\t\t});\r\n\t}\r\n\t//else console.log(\"kbhhjbjh\");\r\n}\r\n\r\n\r\n// freeze input fields and the submit button\r\n// while processing\r\nfunction freezeControls(){\r\n\t$(\"#submitButton\").prop('disabled', true);\r\n\t$(\"#locationToInput\").prop('disabled', true);\r\n\t$(\"#locationFromInput\").prop('disabled', true);\t\r\n}\r\n\r\nfunction clearDiv(div){\r\n\tdiv.empty();\r\n\t//div.prop('disabled', false);\r\n}\r\n\r\n// \r\nfunction populateDriveFactors(uberInfo){\r\n\tdriveFactors.duration= uberInfo.prices[0].duration/60;\t\t\t\t\t// convert to mins\r\n\tdriveFactors.distance= uberInfo.prices[0].distance\r\n\tdriveFactors.currency = uberInfo.prices[0].estimate.match(/^\\D*/)[0];\t// get currency symbol\r\n\tif (driveFactors.units=='metric'){\r\n\t\tdriveFactors.distance= uberInfo.prices[0].distance*m2k;\t\t\t\t// convert to kms\r\n\t} else if (driveFactors.units=='imperial'){\r\n\t\tdriveFactors.distance= uberInfo.prices[0].distance;\t\t\t\t\t// leave in miles as retured from uber\r\n\t}\r\n}\r\n\r\n// calculates cost of driving based on info about the uber trip\r\nfunction makeDriveCalculations(){\r\n\tvar df = driveFactors;\r\n\tdf.petrolUsed = (df.distance/df.milage)*df.trafficMultiplier;\r\n\tvar dc = df.petrolUsed*df.fuelCost;\r\n\tdc = df.currency+(dc*.9).toFixed(0)+'-'+(dc*1.1).toFixed(0)\r\n\tdf.driveCost = dc;\r\n}\r\n\r\n// update unit strings when units change\r\nfunction changeDfUnits(newunits){\r\n\tvar df = driveFactors;\r\n\tvar dfus = driveFactors.unitStrings;\r\n\tdf.units = newunits;\r\n\tswitchModalMilageUnits(newunits);\r\n\tif (df.units == 'metric'){\r\n\t\tdfus.fuelUnits = 'L';\r\n\t\tdfus.milageUnits = 'kmpl';\r\n\t\tdfus.distUnits = 'km';\r\n\t\tdfus.fuelCostUnits = 'per litre';\r\n\t\tdf.milage = df.milage * m2k / g2l;\t\t// convert to kmpl\r\n\t\tdf.distance = df.distance * m2k;\t\t// convert to kms\r\n\t\tdf.fuelCost = df.fuelCost / g2l; //  per litre\r\n\t}\r\n\telse if (df.units == 'imperial'){\r\n\t\tdfus.fuelUnits = 'GL';\r\n\t\tdfus.milageUnits = 'mpg';\r\n\t\tdfus.distUnits = 'miles';\r\n\t\tdfus.fuelCostUnits = 'per gallon';\r\n\t\tdf.milage = df.milage * g2l / m2k;\t// convert to mpg\r\n\t\tdf.distance = df.distance / m2k\t\t// convert to miles\r\n\t\tdf.fuelCost = df.fuelCost * g2l; // per gallon\r\n\t}\r\n\tmakeDriveCalculations();\r\n\t//console.log(driveFactors);\r\n}\r\n\r\n// adds distance, time and driving cost info on the page\r\nfunction refreshDriveInfo(){\r\n\tvar df = driveFactors ;\r\n\tvar dfus = driveFactors.unitStrings ;\r\n\tvar html = '';\r\n\thtml += '<h5 style=\"text-align : center;\"><br><strong>'+df.driveCost+'<sup>*<sup></strong></h5>';\r\n\t$driveResultSubDiv.html(html);\r\n\t$fuelSpan.html(df.petrolUsed.toFixed(2) + ' ' + dfus.fuelUnits + \r\n\t\t'<br>@ '+df.currency+df.fuelCost.toFixed(2)+' '+ dfus.fuelCostUnits);\r\n\t$resultDiv.html('<p>Distance: '+(df.distance).toFixed(2)+' '+dfus.distUnits+'</p>'+\r\n\t\t'<p><i class=\"material-icons\" id=\"time-icon\">access_time</i> ' + df.duration+' mins</p>');\r\n}\r\n\r\n// build html string for displaying cost of getting an uber\r\nfunction createUberHtml(uberInfo){\r\n\tvar cheapestOptionCost = uberInfo.prices[0].estimate.split('.')[0]; // first result from uber, stripped of decimal places\r\n\tvar html = '';\r\n\thtml+= '<h5 style=\"text-align : center;\"><br><strong>' + cheapestOptionCost +'<sup>*<sup></strong></h5>'\r\n\thtml+= '<p style=\"text-align : center;\">via '+uberInfo.prices[0].display_name+'</p>';\r\n\thtml+= '<hr><small>Other options</small><br>';\r\n\thtml+= '<table class=\"mdl-data-table mdl-js-data-table\" style=\"width:20%;\">';\r\n\tvar serviceName = uberInfo.prices[0].display_name;\r\n\t$.each(uberInfo.prices, function (key, value) {\r\n\t\t// check if result for same service has already been displayed.\r\n\t\t// takes care of uber pool being returned twice in india.\r\n\t\tif (value.display_name != serviceName && value.estimate !='Metered') {\r\n\t\t\tserviceName = value.display_name;\r\n\t\t\thtml+='<tr><td>'+serviceName + '</td><td>' + value.estimate + '</td></tr>';\r\n\t\t}\t\t\t\r\n\t});\r\n\thtml+='</table>';\r\n\treturn html;\r\n}\r\n\r\n// SUBMIT button\r\n$(\"#submitButton\").click(function () {\r\n\tif (!fromLocationValid() || !toLocationValid()){\r\n\t\t// TO-DO: notify user something is wrong with the input\r\n\t\treturn;\r\n\t}\r\n\tfreezeControls();\t\t// freeze inputs\r\n\t$progressBar.show();\t// show a progress bar while processing\r\n\tvar trafficPromise = $.post(\"/traffic\", currentLocationInfo)\t// get traffic multiplier from google\r\n\ttrafficPromise.then(function(reply){\r\n\t\tconsole.log(reply.multiplier);\r\n\t\tdriveFactors.trafficMultiplier = reply.multiplier;\r\n\t\tvar uberPromise = $.post(\"/uber\", currentLocationInfo);\t// get price estimates from uber\r\n\t\tuberPromise.then(function (data) {\t\r\n\t\t\t//console.log(data);\r\n\t\t\t$fromDiv.append(fromStr);\t\t\t\t// display 'from' location\r\n\t\t\t$toDiv.append(toStr);\t\t\t\t\t// display 'to' location\r\n\t\t\tpopulateDriveFactors(data);\t\t\t\t// add uber data to drve factors\r\n\t\t\tmakeDriveCalculations();\t\t\t\t// calculate drive results\r\n\t\t\trefreshDriveInfo();\t\t\t\t\t\t// display driving cost on page\r\n\t\t\tvar uberHtml = createUberHtml(data);\t// generate html for uber results\r\n\t\t\t$uberResultSubDiv.append(uberHtml);\t\t// display uber prices\r\n\t\t\t$inputGrid.fadeOut( \"slow\", function(){\t// fade in result div\r\n\t\t\t\t$resultGrid.fadeIn( \"slow\" );\r\n\t\t\t\tvar trafficLayer = new google.maps.TrafficLayer();\t// add traffic layer on map\r\n\t\t\t\ttrafficLayer.setMap(map);\r\n\t\t\t});\r\n\t\t})\r\n\t});\r\n});\r\n\r\n// BACK button\r\n$(\"#backButton\").click(function () {\r\n\tresetEverything();\r\n});\r\n\r\nvar dialog = document.querySelector('dialog');\r\nvar showDialogButton = document.querySelector('#settings_icon');\r\nvar showDialogButton = document.querySelector('#settings_icon');\r\n\r\nif (! dialog.showModal) {\r\n  dialogPolyfill.registerDialog(dialog);\r\n}\r\nshowDialogButton.addEventListener('click', function() {\r\n\tdialog.showModal();\r\n});\r\ndialog.querySelector('.close').addEventListener('click', function() {\r\n\trefreshDriveInfo();\r\n\tdialog.close();\r\n});\r\n$('#mileage_slider').on('input',  function() {\r\n   $(\"#mileage_label\").innerHTML = $('#mileage_slider').val();           \r\n});\r\n\r\n\t\t// dialog.showModal();\t \r\n\r\nfunction getValueFromMilageString(string){\r\n\treturn parseFloat(string.split(' ')[0]);\r\n}\r\n\t \r\n$('input[type=radio][name=units]').change(function(){\r\n\tchangeDfUnits(this.value);\r\n});\r\n\r\n\r\n// this is a needlessly long function\r\n// all it does is convert the units of the three milage options in the modal dialog\r\n// from kmpl to mpg or vie-versa. the function is a bit complex to avoid static linking the \r\n// predetermined values for both unit systems. This prefered in order to support two different\r\n// types of  'gallons' (USA/UK). Since the converted values are calculated on the fly, for UK visitors\r\n// the conversion variable is modified and the values change here accordingly.\r\n// Must be a way to refactor this somehow.\r\nfunction switchModalMilageUnits(newunits){\r\n\tvar smallMilage = $('#modal-milage-small').text();\r\n\tvar mediumMilage = $('#modal-milage-medium').text();\r\n\tvar largeMilage = $('#modal-milage-large').text();\r\n\tif (newunits == 'metric'){\r\n\t\tsmallMilage = Math.round(getValueFromMilageString(smallMilage) * m2k / g2l).toString() + ' kmpl';\r\n\t\tmediumMilage = Math.round(getValueFromMilageString(mediumMilage) * m2k / g2l).toString()+ ' kmpl';\r\n\t\tlargeMilage = Math.round(getValueFromMilageString(largeMilage) * m2k / g2l).toString() + ' kmpl';\r\n\t\t\r\n\t} else if (newunits == 'imperial'){\r\n\t\tsmallMilage = Math.round(getValueFromMilageString(smallMilage) * g2l / m2k).toString() + ' mpg';\r\n\t\tmediumMilage = Math.round(getValueFromMilageString(mediumMilage) * g2l / m2k).toString() + ' mpg';\r\n\t\tlargeMilage = Math.round(getValueFromMilageString(largeMilage) * g2l / m2k).toString() + ' mpg';\r\n\t}\r\n\t$('#modal-milage-small').text(smallMilage);\r\n\t$('#modal-milage-medium').text(mediumMilage);\r\n\t$('#modal-milage-large').text(largeMilage);\r\n}\r\n\r\n\r\n$('input[type=radio][name=fuel]').change(function(){\r\n\tdriveFactors.fuel = this.value;\r\n\t$('#modal-fuel-name').text(this.value);\r\n\t//console.log(driveFactors);\r\n\t// change milage picker units\r\n});\r\n\r\n\r\n// google analytics-----------\r\n(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\r\n(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\r\nm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\r\n})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\r\n\r\nga('create', 'UA-82207430-1', 'auto');\r\nga('send', 'pageview');\r\n\r\n//---------------------------------\r\n\r\n"],"sourceRoot":"/source/"}